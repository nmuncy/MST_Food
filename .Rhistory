}else if(hold_stimType[k] == 62){
if(hold_resp[k] == 1){
assign(paste0("behSep_resp_block",i),c(get(paste0("behSep_resp_block",i)),"L_Hit"))
}else if(hold_resp[k] == 2){
assign(paste0("behSep_resp_block",i),c(get(paste0("behSep_resp_block",i)),"L_Miss"))
}else{
assign(paste0("behSep_resp_block",i),c(get(paste0("behSep_resp_block",i)),"XLT_New"))
}
# Object
}else if(hold_stimType[k] == 63){
if(hold_resp[k] == 1){
assign(paste0("behSep_resp_block",i),c(get(paste0("behSep_resp_block",i)),"O_Hit"))
}else if(hold_resp[k] == 2){
assign(paste0("behSep_resp_block",i),c(get(paste0("behSep_resp_block",i)),"O_Miss"))
}else{
assign(paste0("behSep_resp_block",i),c(get(paste0("behSep_resp_block",i)),"XOT_New"))
}
}
# Lures
}else if(grepl("7",hold_stimType[k]) == T){
# collapse across all stimulus types
if(hold_resp[k] == 1){
assign(paste0("behAll_resp_block",i),c(get(paste0("behAll_resp_block",i)),"LFA"))
}else if(hold_resp[k] == 2){
assign(paste0("behAll_resp_block",i),c(get(paste0("behAll_resp_block",i)),"LCR"))
}else{
assign(paste0("behAll_resp_block",i),c(get(paste0("behAll_resp_block",i)),"XL_New"))
}
# High cal
if(hold_stimType[k] == 71){
if(hold_resp[k] == 1){
assign(paste0("behSep_resp_block",i),c(get(paste0("behSep_resp_block",i)),"H_LFA"))
}else if(hold_resp[k] == 2){
assign(paste0("behSep_resp_block",i),c(get(paste0("behSep_resp_block",i)),"H_LCR"))
}else{
assign(paste0("behSep_resp_block",i),c(get(paste0("behSep_resp_block",i)),"XHL_New"))
}
# Low cal
}else if(hold_stimType[k] == 72){
if(hold_resp[k] == 1){
assign(paste0("behSep_resp_block",i),c(get(paste0("behSep_resp_block",i)),"L_LFA"))
}else if(hold_resp[k] == 2){
assign(paste0("behSep_resp_block",i),c(get(paste0("behSep_resp_block",i)),"L_LCR"))
}else{
assign(paste0("behSep_resp_block",i),c(get(paste0("behSep_resp_block",i)),"XLL_New"))
}
# Object
}else if(hold_stimType[k] == 73){
if(hold_resp[k] == 1){
assign(paste0("behSep_resp_block",i),c(get(paste0("behSep_resp_block",i)),"O_LFA"))
}else if(hold_resp[k] == 2){
assign(paste0("behSep_resp_block",i),c(get(paste0("behSep_resp_block",i)),"O_LCR"))
}else{
assign(paste0("behSep_resp_block",i),c(get(paste0("behSep_resp_block",i)),"XOL_New"))
}
}
}
# First presentations
}else{
# collapse across all stimulus types
if(hold_resp[k] == 1){
assign(paste0("behAll_resp_block",i),c(get(paste0("behAll_resp_block",i)),"XF_FA"))
}else if(hold_resp[k] == 2){
assign(paste0("behAll_resp_block",i),c(get(paste0("behAll_resp_block",i)),"XF_Miss"))
}else{
assign(paste0("behAll_resp_block",i),c(get(paste0("behAll_resp_block",i)),"FCR"))
}
# High cal
if(hold_stimType[k] == 91){
if(hold_resp[k] == 1){
assign(paste0("behSep_resp_block",i),c(get(paste0("behSep_resp_block",i)),"XHF_FA"))
}else if(hold_resp[k] == 2){
assign(paste0("behSep_resp_block",i),c(get(paste0("behSep_resp_block",i)),"XHF_Miss"))
}else{
assign(paste0("behSep_resp_block",i),c(get(paste0("behSep_resp_block",i)),"H_FCR"))
}
# Low cal
}else if(hold_stimType[k] == 92){
if(hold_resp[k] == 1){
assign(paste0("behSep_resp_block",i),c(get(paste0("behSep_resp_block",i)),"XLF_FA"))
}else if(hold_resp[k] == 2){
assign(paste0("behSep_resp_block",i),c(get(paste0("behSep_resp_block",i)),"XLF_Miss"))
}else{
assign(paste0("behSep_resp_block",i),c(get(paste0("behSep_resp_block",i)),"L_FCR"))
}
# Object
}else if(hold_stimType[k] == 93){
if(hold_resp[k] == 1){
assign(paste0("behSep_resp_block",i),c(get(paste0("behSep_resp_block",i)),"XOF_FA"))
}else if(hold_resp[k] == 2){
assign(paste0("behSep_resp_block",i),c(get(paste0("behSep_resp_block",i)),"XOF_Miss"))
}else{
assign(paste0("behSep_resp_block",i),c(get(paste0("behSep_resp_block",i)),"O_FCR"))
}
}
}
# Non-responses
}else{
assign(paste0("behAll_resp_block",i),c(get(paste0("behAll_resp_block",i)),"999"))
assign(paste0("behSep_resp_block",i),c(get(paste0("behSep_resp_block",i)),"999"))
}
}
### load data and packages
library(stringr)
library(openxlsx)
inputDir <- "/Volumes/Vedder/FoodMST/Analyses/behAnalysis/all_data/converted/"
outputDir <- "/Volumes/Vedder/FoodMST/Analyses/behAnalysis/timing_files/"
txtList <- list.files(path = inputDir, pattern = ".*.txt")
txtList <- t(txtList)
j <- txtList[1]
# data_raw <- read.delim(paste0("~/Desktop/",j),sep=" ")
data_raw <- read.delim(paste0(inputDir,j),sep=" ")
# strip off training
ind_start <- as.numeric(grep("Test:", data_raw[,1]))
data_raw <- data_raw[-(1:ind_start),]
row.names(data_raw) <- 1:dim(data_raw)[1]
# blocks
ind_blockList <- grep("BlockList:",data_raw[,1])
num_blocks <- as.numeric(length(ind_blockList))
# pull data positions
ind_stimImage <- grep("StimImage:", data_raw[,1])
ind_stimType <- grep("StimValue:", data_raw[,1])
ind_corr <- grep("Correct:", data_raw[,1])
ind_resp <- grep("Stim.RESP:", data_raw[,1])
# split into blocks
for (i in 1:length(ind_blockList)) {
if(i ==1){
ind_block <- which(ind_stimImage < ind_blockList[i])
}else{
ind_block <- which(ind_stimImage < ind_blockList[i] & ind_stimImage >=ind_blockList[i-1]) }
hold_stimType <- as.numeric(as.character(data_raw[ind_stimType[ind_block],2]))
hold_resp <- as.numeric(as.character(data_raw[ind_resp[ind_block],2]))
hold_corr <- as.numeric(as.character(data_raw[ind_corr[ind_block],2]))
# set up matrices
behAll_resp <- behSep_resp <- matrix(0,nrow=length(ind_block),ncol=1)
## determine behavior - split for stim types
# (TH = 61, TL = 62, TO = 63, LH = 71, LL = 72, OL = 73, FH = 91, FL = 92, FO = 93)
# (1 = old, 2 = sim, 3 = new)
for( k in c(6:7,9)){
# r is response
for( r in 1:3){
indAll <- which(grepl(k,hold_stimType) & hold_resp==r & hold_corr!=3)
# type is high and low calorie and object
for( type in 1:3){
indSep <- which(grepl(paste0(k,type),hold_stimType) & hold_resp==r & hold_corr!=3)
# Target
if(k == 6){
if(r==1){
behAll_resp[indAll] <- "Hit"
if(type==1){ behSep_resp[indSep] <- "H_Hit"}
if(type==2){ behSep_resp[indSep] <- "L_Hit"}
if(type==3){ behSep_resp[indSep] <- "O_Hit"}
}
if(r==2){
behAll_resp[indAll] <- "Miss"
if(type==1){ behSep_resp[indSep] <- "H_Miss"}
if(type==2){ behSep_resp[indSep] <- "L_Miss"}
if(type==3){ behSep_resp[indSep] <- "O_Miss"}
}
if(r==3){
behAll_resp[indAll] <- "XT_New"
if(type==1){ behSep_resp[indSep] <- "XHT_New"}
if(type==2){ behSep_resp[indSep] <- "XLT_New"}
if(type==3){ behSep_resp[indSep] <- "XOT_New"}
}
}
# Lure
if(k == 7){
if(r==1){
behAll_resp[indAll] <- "LFA"
if(type==1){ behSep_resp[indSep] <- "H_LFA"}
if(type==2){ behSep_resp[indSep] <- "L_LFA"}
if(type==3){ behSep_resp[indSep] <- "O_LFA"}
}
if(r==2){
behAll_resp[indAll] <- "LCR"
if(type==1){ behSep_resp[indSep] <- "H_LCR"}
if(type==2){ behSep_resp[indSep] <- "L_LCR"}
if(type==3){ behSep_resp[indSep] <- "O_LCR"}
}
if(r==3){
behAll_resp[indAll] <- "XL_New"
if(type==1){ behSep_resp[indSep] <- "XHL_New"}
if(type==2){ behSep_resp[indSep] <- "XLL_New"}
if(type==3){ behSep_resp[indSep] <- "XOL_New"}
}
}
# Foils
if(k == 9){
indAll <- which(grepl(k,hold_stimType) & hold_resp==r)
indSep <- which(grepl(paste0(k,type),hold_stimType) & hold_resp==r)
if(r==1){
behAll_resp[indAll] <- "XF_FA"
if(type==1){ behSep_resp[indSep] <- "XHF_FA"}
if(type==2){ behSep_resp[indSep] <- "XLF_FA"}
if(type==3){ behSep_resp[indSep] <- "XOF_FA"}
}
if(r==2){
behAll_resp[indAll] <- "XF_Miss"
if(type==1){ behSep_resp[indSep] <- "XHF_Miss"}
if(type==2){ behSep_resp[indSep] <- "XLF_Miss"}
if(type==3){ behSep_resp[indSep] <- "XOF_Miss"}
}
if(r==3){
behAll_resp[indAll] <- "FCR"
if(type==1){ behSep_resp[indSep] <- "H_FCR"}
if(type==2){ behSep_resp[indSep] <- "L_FCR"}
if(type==3){ behSep_resp[indSep] <- "O_FCR"}
}
}
# First Presentations
indAllFirst <- which(hold_resp==r & hold_corr==3)
indSepFirst <- which(grepl(type,hold_stimType) & hold_resp==r & hold_corr==3)
if(r==1){
behAll_resp[indAllFirst] <- "XF_FA"
if(type==1){ behSep_resp[indSepFirst] <- "XHF_FA"}
if(type==2){ behSep_resp[indSepFirst] <- "XLF_FA"}
if(type==3){ behSep_resp[indSepFirst] <- "XOF_FA"}
}
if(r==2){
behAll_resp[indAllFirst] <- "XF_Miss"
if(type==1){ behSep_resp[indSepFirst] <- "XHF_Miss"}
if(type==2){ behSep_resp[indSepFirst] <- "XLF_Miss"}
if(type==3){ behSep_resp[indSepFirst] <- "XOF_Miss"}
}
if(r==3){
behAll_resp[indAllFirst] <- "FCR"
if(type==1){ behSep_resp[indSepFirst] <- "H_FCR"}
if(type==2){ behSep_resp[indSepFirst] <- "L_FCR"}
if(type==3){ behSep_resp[indSepFirst] <- "O_FCR"}
}
}
}
}
behAll_resp[which(behAll_resp=="0")] <- "999"
behSep_resp[which(behSep_resp=="0")] <- "999"
assign(paste0("behAll_resp_block",i),behAll_resp)
assign(paste0("behSep_resp_block",i),behSep_resp)
} # for blocks
head(behSep_resp_block1)
length(behSep_resp_block2)
length(behSep_resp_block1)
length(behSep_resp_block3)
length(behAll_resp_block3)
behAll_resp
library(stringr)
library(openxlsx)
inputDir <- "/Volumes/Vedder/FoodMST/Analyses/behAnalysis/all_data/converted/"
outputDir <- "/Volumes/Vedder/FoodMST/Analyses/behAnalysis/timing_files/"
txtList <- list.files(path = inputDir, pattern = ".*.txt")
txtList <- t(txtList)
j <- txtList[1]
# data_raw <- read.delim(paste0("~/Desktop/",j),sep=" ")
data_raw <- read.delim(paste0(inputDir,j),sep=" ")
# strip off training
ind_start <- as.numeric(grep("Test:", data_raw[,1]))
data_raw <- data_raw[-(1:ind_start),]
row.names(data_raw) <- 1:dim(data_raw)[1]
# strip off training
ind_start <- as.numeric(grep("Test:", data_raw[,1]))
# data_raw <- read.delim(paste0("~/Desktop/",j),sep=" ")
data_raw <- read.delim(paste0(inputDir,j),sep=" ")
# strip off training
ind_start <- as.numeric(grep("Test:", data_raw[,1]))
data_raw <- data_raw[-(1:ind_start),]
row.names(data_raw) <- 1:dim(data_raw)[1]
# blocks
ind_blockList <- grep("BlockList:",data_raw[,1])
num_blocks <- as.numeric(length(ind_blockList))
# pull data positions
ind_stimImage <- grep("StimImage:", data_raw[,1])
ind_stimType <- grep("StimValue:", data_raw[,1])
ind_corr <- grep("Correct:", data_raw[,1])
ind_resp <- grep("Stim.RESP:", data_raw[,1])
View(data_raw)
105126-103626
i<-1
if(i ==1){
ind_block <- which(ind_stimImage < ind_blockList[i])
}else{
ind_block <- which(ind_stimImage < ind_blockList[i] & ind_stimImage >=ind_blockList[i-1])
}
ind_block
hold_stimType <- as.numeric(as.character(data_raw[ind_stimType[ind_block],2]))
hold_resp <- as.numeric(as.character(data_raw[ind_resp[ind_block],2]))
hold_corr <- as.numeric(as.character(data_raw[ind_corr[ind_block],2]))
hold_stimType
hold_resp
hold_corr
hold_stimOset <- as.numeric(as.character(data_raw[ind_stimOnset[ind_block],2]))
ind_stimOnset <- grep("Stim.OnsetTime:", data_raw[,1])
ind_fixOnset <- grep("Fixation.OnsetTime:", data_raw[,1])
hold_stimOnset <- as.numeric(as.character(data_raw[ind_stimOnset[ind_block],2]))
hold_stimOnset
hold_stimOnset[1]
hold_base <- hold_stimOnset[1]
hold_stimOnset[2]-hold_base
hold_stimOnset[3]-hold_base
k
k <- 6
r <- 1
i
type <- 1
which(grepl(k,hold_stimType) & hold_resp==r & hold_corr!=3)
hold_resp
hold_stimType
k
hold_resp
hold_corr
indAll <- which(grepl(k,hold_stimType) & hold_resp==r & hold_corr!=3)
indAll
type
which(grepl(paste0(k,type),hold_stimType) & hold_resp==r & hold_corr!=3)
timAll_resp <- timSep_resp <- matrix(0,nrow=length(ind_block),ncol=1)
# set up matrices
behAll_resp <- behSep_resp <- matrix(0,nrow=length(ind_block),ncol=1)
behAll_resp
timAll_resp
# k is T/L/F
for( k in c(6:7,9)){
# r is response
for( r in 1:3){
indAll <- which(grepl(k,hold_stimType) & hold_resp==r & hold_corr!=3)
# type is high and low calorie and object
for( type in 1:3){
indSep <- which(grepl(paste0(k,type),hold_stimType) & hold_resp==r & hold_corr!=3)
# Target
if(k == 6){
if(r==1){
behAll_resp[indAll] <- "Hit"
if(type==1){ behSep_resp[indSep] <- "H_Hit"}
if(type==2){ behSep_resp[indSep] <- "L_Hit"}
if(type==3){ behSep_resp[indSep] <- "O_Hit"}
}
if(r==2){
behAll_resp[indAll] <- "Miss"
if(type==1){ behSep_resp[indSep] <- "H_Miss"}
if(type==2){ behSep_resp[indSep] <- "L_Miss"}
if(type==3){ behSep_resp[indSep] <- "O_Miss"}
}
if(r==3){
behAll_resp[indAll] <- "XT_New"
if(type==1){ behSep_resp[indSep] <- "XHT_New"}
if(type==2){ behSep_resp[indSep] <- "XLT_New"}
if(type==3){ behSep_resp[indSep] <- "XOT_New"}
}
}
# Lure
if(k == 7){
if(r==1){
behAll_resp[indAll] <- "LFA"
if(type==1){ behSep_resp[indSep] <- "H_LFA"}
if(type==2){ behSep_resp[indSep] <- "L_LFA"}
if(type==3){ behSep_resp[indSep] <- "O_LFA"}
}
if(r==2){
behAll_resp[indAll] <- "LCR"
if(type==1){ behSep_resp[indSep] <- "H_LCR"}
if(type==2){ behSep_resp[indSep] <- "L_LCR"}
if(type==3){ behSep_resp[indSep] <- "O_LCR"}
}
if(r==3){
behAll_resp[indAll] <- "XL_New"
if(type==1){ behSep_resp[indSep] <- "XHL_New"}
if(type==2){ behSep_resp[indSep] <- "XLL_New"}
if(type==3){ behSep_resp[indSep] <- "XOL_New"}
}
}
# Foils
if(k == 9){
indAll <- which(grepl(k,hold_stimType) & hold_resp==r)
indSep <- which(grepl(paste0(k,type),hold_stimType) & hold_resp==r)
if(r==1){
behAll_resp[indAll] <- "XF_FA"
if(type==1){ behSep_resp[indSep] <- "XHF_FA"}
if(type==2){ behSep_resp[indSep] <- "XLF_FA"}
if(type==3){ behSep_resp[indSep] <- "XOF_FA"}
}
if(r==2){
behAll_resp[indAll] <- "XF_Miss"
if(type==1){ behSep_resp[indSep] <- "XHF_Miss"}
if(type==2){ behSep_resp[indSep] <- "XLF_Miss"}
if(type==3){ behSep_resp[indSep] <- "XOF_Miss"}
}
if(r==3){
behAll_resp[indAll] <- "FCR"
if(type==1){ behSep_resp[indSep] <- "H_FCR"}
if(type==2){ behSep_resp[indSep] <- "L_FCR"}
if(type==3){ behSep_resp[indSep] <- "O_FCR"}
}
}
# First Presentations
indAllFirst <- which(hold_resp==r & hold_corr==3)
indSepFirst <- which(grepl(type,hold_stimType) & hold_resp==r & hold_corr==3)
if(r==1){
behAll_resp[indAllFirst] <- "XF_FA"
if(type==1){ behSep_resp[indSepFirst] <- "XHF_FA"}
if(type==2){ behSep_resp[indSepFirst] <- "XLF_FA"}
if(type==3){ behSep_resp[indSepFirst] <- "XOF_FA"}
}
if(r==2){
behAll_resp[indAllFirst] <- "XF_Miss"
if(type==1){ behSep_resp[indSepFirst] <- "XHF_Miss"}
if(type==2){ behSep_resp[indSepFirst] <- "XLF_Miss"}
if(type==3){ behSep_resp[indSepFirst] <- "XOF_Miss"}
}
if(r==3){
behAll_resp[indAllFirst] <- "FCR"
if(type==1){ behSep_resp[indSepFirst] <- "H_FCR"}
if(type==2){ behSep_resp[indSepFirst] <- "L_FCR"}
if(type==3){ behSep_resp[indSepFirst] <- "O_FCR"}
}
}
}
}
behAll_resp[which(behAll_resp=="0")] <- "999"
behSep_resp[which(behSep_resp=="0")] <- "999"
assign(paste0("behAll_resp_block",i),behAll_resp)
assign(paste0("behSep_resp_block",i),behSep_resp)
View(behAll_resp)
View(behAll_resp_block1)
length(ind_block)
## set up behavior outputs
# all
for(a in c("Hit","Miss","XT_New","LFA","LCR","XL_New","XF_FA","XF_Miss","FCR","NR")){
assign(paste0("timeAll_",a),NA)
}
stim
beh
## set up behavior outputs
for(stim in c("All","O","H","L")){
for(beh in c("Hit","Miss","XT_New","LFA","LCR","XL_New","XF_FA","XF_Miss","FCR","NR")){
assign(paste0("time_",stim,"_",beh),NA)
}
}
indAll
hold_stimOnset[indAll]
tmp_time <- hold_stimOnset[indAll]
tmp_time
tmp_time-hold_base
hold_base
546349-103626
hold_time <- round((tmp_time-hold_base)/1000,2)
hold_time
hold_time <- round((tmp_time-hold_base)/1000,1)
k
r
inputDir <- "/Volumes/Vedder/FoodMST/Analyses/behAnalysis/all_data/converted/"
outputDir <- "/Volumes/Vedder/FoodMST/Analyses/behAnalysis/timing_files/"
txtList <- list.files(path = inputDir, pattern = ".*.txt")
txtList <- t(txtList)
j <- txtList[1]
# data_raw <- read.delim(paste0("~/Desktop/",j),sep=" ")
data_raw <- read.delim(paste0(inputDir,j),sep=" ")
# strip off training
ind_start <- as.numeric(grep("Test:", data_raw[,1]))
data_raw <- data_raw[-(1:ind_start),]
row.names(data_raw) <- 1:dim(data_raw)[1]
# blocks
ind_blockList <- grep("BlockList:",data_raw[,1])
num_blocks <- as.numeric(length(ind_blockList))
# pull data positions
ind_stimImage <- grep("StimImage:", data_raw[,1])
ind_stimType <- grep("StimValue:", data_raw[,1])
ind_stimOnset <- grep("Stim.OnsetTime:", data_raw[,1])
ind_corr <- grep("Correct:", data_raw[,1])
ind_resp <- grep("Stim.RESP:", data_raw[,1])
i <- 1
if(i ==1){
ind_block <- which(ind_stimImage < ind_blockList[i])
}else{
ind_block <- which(ind_stimImage < ind_blockList[i] & ind_stimImage >=ind_blockList[i-1])
}
# get info
hold_stimType <- as.numeric(as.character(data_raw[ind_stimType[ind_block],2]))
hold_stimOnset <- as.numeric(as.character(data_raw[ind_stimOnset[ind_block],2])); hold_base <- hold_stimOnset[1]
hold_resp <- as.numeric(as.character(data_raw[ind_resp[ind_block],2]))
hold_corr <- as.numeric(as.character(data_raw[ind_corr[ind_block],2]))
# set up matrices
behAll_resp <- behSep_resp <- matrix(0,nrow=length(ind_block),ncol=1)
# set up behavior outputs
for(stim in c("All","O","H","L")){
for(beh in c("Hit","Miss","XT_New","LFA","LCR","XL_New","XF_FA","XF_Miss","FCR","NR")){
assign(paste0("time_",stim,"_",beh),NA)
}
}
k <- 6
r <- 1
type <- 1
indAll <- which(grepl(k,hold_stimType) & hold_resp==r & hold_corr!=3)
indAll
tmp_time <- hold_stimOnset[indAll]
hold_time <- round((tmp_time-hold_base)/1000,1)
hold_time
length(indAll)
length(hold_time)
tmp_timeAll <- hold_stimOnset[indAll]
hold_timeAll <- round((tmp_time-hold_base)/1000,1)
indSep <- which(grepl(paste0(k,type),hold_stimType) & hold_resp==r & hold_corr!=3)
indSep
tmp_timeSep <- hold_stimOnset[indSep]
tmp_timeSep
hold_timeSep <- round((tmp_timeSep-hold_base)/1000,1)
hold_timeSep
time_All_XL_New
k <- 9
r <- 3
hold_stimType
which(grepl(k,hold_stimType) & hold_resp==r)
which(grepl(paste0(k,type),hold_stimType) & hold_resp==r)
hold_stimType
type
