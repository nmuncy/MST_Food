}else if(grepl("Targ",hold.output[i,2])==T && grepl("F_L_",hold.output[i,1])==T){
hold.output[i,5] <- 62
}else if(grepl("Targ",hold.output[i,2])==T && grepl("O_",hold.output[i,1])==T){
hold.output[i,5] <- 63
}else if(grepl("Lure",hold.output[i,2])==T && grepl("F_H_",hold.output[i,1])==T){
hold.output[i,5] <- 71
}else if(grepl("Lure",hold.output[i,2])==T && grepl("F_L_",hold.output[i,1])==T){
hold.output[i,5] <- 72
}else if(grepl("Lure",hold.output[i,2])==T && grepl("O_",hold.output[i,1])==T){
hold.output[i,5] <- 73
}else if(grepl("Foil",hold.output[i,2])==T && grepl("F_H_",hold.output[i,1])==T){
hold.output[i,5] <- 91
}else if(grepl("Foil",hold.output[i,2])==T && grepl("F_L_",hold.output[i,1])==T){
hold.output[i,5] <- 92
}else if(grepl("Foil",hold.output[i,2])==T && grepl("O_",hold.output[i,1])==T){
hold.output[i,5] <- 93
}
}
head(hold.output)
for(i in 1:dim(hold.output)[1]){
if(hold.output[i,4]=="Yes"){
if(hold.output[i,5]==61 || hold.output[i,5]==62 || hold.output[i,5]==63){
hold.output[i,6] <- 1
}else if(hold.output[i,5]==71 || hold.output[i,5]==72 || hold.output[i,5]==73){
hold.output[i,6] <- 2
}
}else{
hold.output[i,6] <- 3
}
}
View(hold.output)
c.FHT <- c.FLT <- c.OT <- c.FHL <- c.FLL <- c.OL <- c.FF <- c.OF <- 1
cc.FHT <- cc.FLT <- n.FHTarg
cc.FHL <- cc.FLL <- n.FLLure
cc.FF <- n.FFoil
cc.OT <- n.OTarg; cc.OL <- n.OLure; cc.OF <- n.OFoil
hold.na <- rep(NA,2)
for(j in 1:n.Blocks){
## build list
# extract number of stim per type per block
hold.FHTarg <- stim.FHS[v.FHTarg[c.FHT:cc.FHT],1]
hold.FLTarg <- stim.FLS[v.FLTarg[c.FLT:cc.FLT],1]
hold.OTarg <- stim.OS[v.OTarg[c.OT:cc.OT],1]
hold.FHLure <- stim.FHP[v.FHLure[c.FHL:cc.FHL],1]
hold.FLLure <- stim.FLP[v.FLLure[c.FLL:cc.FLL],1]
hold.OLure <- stim.OP[v.OLure[c.OL:cc.OL],1]
hold.OFoil <- stim.OS[v.OFoil[c.OF:cc.OF],1]
hold.FFoil <- stim.FFoil[c.FF:cc.FF]
# randomise lists for type (Food,Object)
hold.T <- sample(c(hold.FHTarg,hold.FLTarg,hold.OTarg),n.FHTarg+n.FLTarg+n.OTarg)
hold.L <- sample(c(hold.FHLure,hold.FLLure,hold.OLure),n.FHLure+n.FLLure+n.OLure)
hold.F <- sample(c(hold.FFoil,hold.OFoil),n.FFoil+n.OFoil)
# update counters
c.FHT <- c.FHT+n.FHTarg; c.FLT <- c.FLT+n.FLTarg; c.OT <- c.OT+n.OTarg
c.FHL <- c.FHL+n.FHLure; c.FLL <- c.FLL+n.FLLure; c.OL <- c.OL+n.OLure
c.FF <- c.FF+n.FFoil; c.OF <- c.OF+n.OFoil
cc.FHT <- cc.FHT+n.FHTarg; cc.FLT <- cc.FLT+n.FLTarg; cc.OT <- cc.OT+n.OTarg
cc.FHL <- cc.FHL+n.FHLure; cc.FLL <- cc.FLL+n.FLLure; cc.OL <- cc.OL+n.OLure
cc.FF <- cc.FF+n.FFoil; cc.OF <- cc.OF+n.OFoil
## build each block
# iterate till success
status <- 0; while(status != 1){
# construct stimulus list - this randomization is what makes or breaks the DF construction
hold.input <- Build.Function(hold.T,hold.L,hold.F)
## fill output file
hold.output <- matrix(NA,nrow=(2*(n.Repeat)+n.FFoil+n.OFoil),ncol=6)
hold.rand <- sample(1:dim(hold.output)[1],dim(hold.output)[1])
for(i in 1:dim(hold.input)[1]){
# find first NA, lag, positions 1 & 2
hold.FNA <- as.numeric(min(which(is.na(hold.output[,1]))))
# fill at random
hold.lag <- as.numeric(hold.input[i,3])
hold.pos1 <- as.numeric(hold.rand[i])
hold.pos2 <- hold.lag + hold.pos1
# if lag
if(hold.lag != 0){
# if pos2 is in df
if(hold.pos2 <= as.numeric(dim(hold.output)[1])){
# if pos1 & pos2 are empty
if(is.na(hold.output[hold.pos1,1])==T && is.na(hold.output[hold.pos2,1])==T){
hold.output[hold.pos1,] <- c(hold.input[i,], "No", hold.na)
hold.output[hold.pos2,] <- c(hold.input[i,], "Yes", hold.na)
# find suitable empty rows
}else{
func.out <- SeedNA.Function(hold.lag,hold.output)
if(length(func.out) > 1){
hold.output[as.numeric(func.out[1]),] <- c(hold.input[i,],"No", hold.na)
hold.output[as.numeric(func.out[2]),] <- c(hold.input[i,],"Yes", hold.na)
}
}
# find empty rows in df
}else{
func.out <- SeedNA.Function(hold.lag,hold.output)
if(length(func.out) > 1){
hold.output[as.numeric(func.out[1]),] <- c(hold.input[i,],"No", hold.na)
hold.output[as.numeric(func.out[2]),] <- c(hold.input[i,],"Yes", hold.na)
}
}
# if no lag
}else{
# if pos1 is empty
if(is.na(hold.output[hold.pos1,1])==T){
hold.output[hold.pos1,] <- c(hold.input[i,],"No", hold.na)
}else{
hold.output[hold.FNA,] <- c(hold.input[i,],"No", hold.na)
}
}
}
## Exit while-loop if DF is constructed successfully
n.na<-0; for(i in 1:dim(hold.output)[1]){
if(is.na(hold.output[i,4])==T){
n.na <- n.na+1
}
}
if(n.na == 0 ){
status <- 1
}
}
# switch a-b for repeat,
for(i in 1:dim(hold.output)[1]){
if(grepl("Yes",hold.output[i,4])==T && grepl("Lure",hold.output[i,2])==T){
hold.output[i,1] <- gsub("a.jpg","b.jpg",hold.output[i,1])
}
}
# StimValue column
# (TH = 61, TL = 62, TO = 63, LH = 71, LL = 72, OL = 73, FH = 91, FL = 92, FO = 93)
for(i in 1:dim(hold.output)[1]){
if(grepl("Targ",hold.output[i,2])==T && grepl("F_H_",hold.output[i,1])==T){
hold.output[i,5] <- 61
}else if(grepl("Targ",hold.output[i,2])==T && grepl("F_L_",hold.output[i,1])==T){
hold.output[i,5] <- 62
}else if(grepl("Targ",hold.output[i,2])==T && grepl("O_",hold.output[i,1])==T){
hold.output[i,5] <- 63
}else if(grepl("Lure",hold.output[i,2])==T && grepl("F_H_",hold.output[i,1])==T){
hold.output[i,5] <- 71
}else if(grepl("Lure",hold.output[i,2])==T && grepl("F_L_",hold.output[i,1])==T){
hold.output[i,5] <- 72
}else if(grepl("Lure",hold.output[i,2])==T && grepl("O_",hold.output[i,1])==T){
hold.output[i,5] <- 73
}else if(grepl("Foil",hold.output[i,2])==T && grepl("F_H_",hold.output[i,1])==T){
hold.output[i,5] <- 91
}else if(grepl("Foil",hold.output[i,2])==T && grepl("F_L_",hold.output[i,1])==T){
hold.output[i,5] <- 92
}else if(grepl("Foil",hold.output[i,2])==T && grepl("O_",hold.output[i,1])==T){
hold.output[i,5] <- 93
}
}
# write correct response column (1=Old, 2=Sim, 3=New)
for(i in 1:dim(hold.output)[1]){
if(hold.output[i,4]=="Yes"){
if(hold.output[i,5]==61 || hold.output[i,5]==62 || hold.output[i,5]==63){
hold.output[i,6] <- 1
}else if(hold.output[i,5]==71 || hold.output[i,5]==72 || hold.output[i,5]==73){
hold.output[i,6] <- 2
}
}else{
hold.output[i,6] <- 3
}
}
# write out
trialNum <- 1:(2*(n.Repeat)+n.FFoil+n.OFoil)
hold.output <- cbind(trialNum,hold.output)
hold.reorganize <- matrix(NA,nrow=dim(hold.output)[1],ncol=dim(hold.output)[2])
hold.reorganize[,1] <- hold.output[,1]
hold.reorganize[,2:4] <- hold.output[,3:5]
hold.reorganize[,5] <- hold.output[,2]
hold.reorganize[,6:7] <- hold.output[,6:7]
fileName <- paste0(subj,"_B",j,"_stimuli.xlsx")
colnames(hold.reorganize) <- c("Trial","StimType","Lag","Repeat","StimFile","StimValue","CorResp")
write.xlsx(hold.reorganize,paste0(subjDir,"/",fileName), sheetName = "Sheet1", col.names = TRUE, row.names = F, append = FALSE)
}
inputDir <- "/Volumes/Vedder/FoodMST/Analyses/behAnalysis/all_data/converted/"
outputDir <- "/Volumes/Vedder/FoodMST/Analyses/behAnalysis/timing_files/"
txtList <- list.files(path = inputDir, pattern = ".*.txt")
inputDir <- "/Volumes/Vedder/FoodMST/Analyses/behAnalysis/all_data/converted/"
outputDir <- "/Volumes/Vedder/FoodMST/Analyses/behAnalysis/timing_files/"
txtList <- list.files(path = inputDir, pattern = ".*.txt")
mode(txtList)
txtList <- list.files(path = inputDir, pattern = ".*.txt")
txtList <- list.files(path = inputDir, pattern = ".*.txt")
txtList <- t(txtList)
length(txtList)
for(j in txtList){print(j)}
data_raw <- read.delim(paste0(inputDir,j))
head(data_raw)
View(data_raw)
data_raw <- read.delim2(paste0(inputDir,j))
View(data_raw)
?read.delim2
data_raw <- read.delim2(paste0(inputDir,j),sep = ":")
data_raw <- read.delim2(paste0(inputDir,j),sep = "\t")
View(data_raw)
data_raw <- read.delim2(paste0(inputDir,j),sep = " ")
View(data_raw)
ind_blockList <- grepl("Block.List:",data_raw[1,])
ind_blockList <- grep("Block.List:",data_raw[,1])
data_raw <- as.matrix(read.delim2(paste0(inputDir,j),sep=" "))
data_raw <- as.data.frame(read.delim2(paste0(inputDir,j),sep=" "))
ind_blockList <- grep("Block.List:",data_raw[,1])
ind_blockList <- grepl("Block.List:",data_raw[,1])
data_raw <- as.data.frame(read.delim(paste0(inputDir,j),sep=" "))
data_raw <- read.delim(paste0(inputDir,j),sep=" ")
ind_blockList <- grep("BlockList:",data_raw[,1])
num_blocks <- length(ind_blockList)
num_blocks <- as.numeric(length(ind_blockList))
ind_stimImage <- grep("StimImage:", data_raw[,1])
ind_respCorr <- grep("Correct:", data_raw[,1])
ind_resp <- grep("Stim.RESP:", data_raw[,1])
inputDir <- "/Volumes/Vedder/FoodMST/Analyses/behAnalysis/all_data/converted/"
outputDir <- "/Volumes/Vedder/FoodMST/Analyses/behAnalysis/timing_files/"
txtList <- list.files(path = inputDir, pattern = ".*.txt")
txtList <- t(txtList)
j <- txtList[1]
data_raw <- read.delim(paste0(inputDir,j),sep=" ")
ind_blockList <- grep("BlockList:",data_raw[,1])
num_blocks <- as.numeric(length(ind_blockList))
ind_stimImage <- grep("StimImage:", data_raw[,1])
ind_respCorr <- grep("Correct:", data_raw[,1])
ind_resp <- grep("Stim.RESP:", data_raw[,1])
View(data_raw)
hold_stimImage <- data_raw[ind_stimImage,2]
hold_respCorr <- data_raw[ind_respCorr,2]
hold_stimImage
hold_stimImage <- as.character(data_raw[ind_stimImage,2])
hold_respCorr <- as.numeric(as.character(data_raw[ind_respCorr,2]))
hold_resp <- as.numeric(as.character(data_raw[ind_resp,2]))
head(hold_stimImage)
ind_start <- grep("Test:", data_raw[,1])
ind_start <- as.numeric(grep("Test:", data_raw[,1]))
data_raw <- data_raw[-(1:ind_start),]
data_raw <- read.delim(paste0(inputDir,j),sep=" ")
data_raw <- read.delim(paste0(inputDir,j),sep=" ")
View(data_raw)
ind_start <- as.numeric(grep("Test:", data_raw[,1]))
data_raw <- data_raw[-(1:ind_start),]
View(data_raw)
ind_blockList <- grep("BlockList:",data_raw[,1])
num_blocks <- as.numeric(length(ind_blockList))
ind_stimImage <- grep("StimImage:", data_raw[,1])
ind_respCorr <- grep("Correct:", data_raw[,1])
ind_resp <- grep("Stim.RESP:", data_raw[,1])
hold_stimImage <- as.character(data_raw[ind_stimImage,2])
hold_respCorr <- as.numeric(as.character(data_raw[ind_respCorr,2]))
hold_resp <- as.numeric(as.character(data_raw[ind_resp,2]))
head(hold_stimImage)
head(hold_respCorr)
head(hold_resp)
tail(hold_stimImage)
ind_stimType <- grep("StimValue:", data_raw[,1])
hold_stimTpe <- as.numeric(as.character(data_raw[ind_stimType,2]))
hold_corr <- as.numeric(as.character(data_raw[ind_corr,2]))
ind_corr <- grep("Correct:", data_raw[,1])
ind_resp <- grep("Stim.RESP:", data_raw[,1])
hold_corr <- as.numeric(as.character(data_raw[ind_corr,2]))
hold_resp <- as.numeric(as.character(data_raw[ind_resp,2]))
426-396
ind_stimImage[1]
row.names(data_raw) <- 1:dim(data_raw)[1]
ind_blockList <- grep("BlockList:",data_raw[,1])
num_blocks <- as.numeric(length(ind_blockList))
ind_stimImage <- grep("StimImage:", data_raw[,1])
ind_stimType <- grep("StimValue:", data_raw[,1])
ind_corr <- grep("Correct:", data_raw[,1])
ind_resp <- grep("Stim.RESP:", data_raw[,1])
head(ind_stimImage)
cor_range <- as.numeric(ind_stimImage[2]-ind_stimImage[1])
length(ind_resp)
length(ind_stimImage)
if(length(ind_resp) == length(ind_stimImage)){print(yes)}
if(length(ind_resp) == length(ind_stimImage)){print("yes")}
i=1
holdA <- as.numeric(ind_resp[i])
holdA
holdB <- as.numeric(ind_resp[i+1])
holdB
cor_range <- as.numeric(ind_stimImage[2]-ind_stimImage[1])
if(length(ind_resp) != length(ind_stimImage)){
for(i in 1:length(ind_resp)){
holdA <- as.numeric(ind_resp[i])
holdB <- as.numeric(ind_resp[i+1])
if(holdB-holdA != cor_range){
ind_resp <- ind_resp[-(i+1)]
}
}
}
?break
hold_stimImage <- as.character(data_raw[ind_stimImage,2])
hold_stimTpe <- as.numeric(as.character(data_raw[ind_stimType,2]))
hold_corr <- as.numeric(as.character(data_raw[ind_corr,2]))
hold_resp <- as.numeric(as.character(data_raw[ind_resp,2]))
length(hold_stimImage)
head(hold_stimImage)
hold_stimType <- as.numeric(as.character(data_raw[ind_stimType,2]))
head(hold_stimType)
head(hold_corr)
head(hold_resp)
parDir <- paste0(getwd(),"/..")
workDir <- paste0(parDir,"/Participants/")
stimDir <- paste0(parDir,"/Stimuli/")
# winPath <- "Stimuli\\"
n.Blocks <- 3
n.FHTarg <- n.FLTarg <- 10
n.FHLure <- n.FLLure <- 20
n.FFoil <- 10
n.OTarg <- 20
n.OLure <- 40
n.OFoil <- 10
n.Repeat <- n.FHTarg+n.FLTarg+n.OTarg+n.FHLure+n.FLLure+n.OLure
n.All <- n.Repeat+n.FFoil+n.OFoil
args <- "p666"
subj <- as.character(args[1])
subjDir <- paste0(workDir, subj)
SeedNA.Function <- function(x,y){
max.Iter <- 200; count <- 1
while(count <= max.Iter){
seed <- sample(which(is.na(y[,1]),arr.ind=T),1)
lag.pos <- seed + x
if(lag.pos <= dim(y)[1]){
if(is.na(y[seed,1])==T && is.na(y[lag.pos,1])==T){
return(list(seed,lag.pos))
break
}
}
count <- count+1
}
return("Fail")
}
Build.Function <- function(Targ,Lure,Foil){
for(x in c("Targ","Lure","Foil")){
# assign(paste0(x,".h"),paste0(winPath,get(x)))
assign(paste0(x,".h"),get(x))
}
hold.all <- c(Targ.h,Lure.h,Foil.h)
hold.label <- c(rep("Targ",n.FHTarg+n.FLTarg+n.OTarg),rep("Lure",n.FHLure+n.FLLure+n.OLure),rep("Foil",n.FFoil+n.OFoil))
h.df <- matrix(NA,nrow=n.All,ncol=3)
h.df[,1] <- hold.all
h.df[,2] <- hold.label
hold.rand <- sample(c(rep(6,(n.Repeat/2)), rep(12,(n.Repeat/2))),n.Repeat)
ccc<-1; for(xx in 1:dim(h.df)[1]){
if(h.df[xx,2]=="Targ" || h.df[xx,2]=="Lure"){
h.df[xx,3] <- hold.rand[ccc]
ccc <- ccc+1
}else{
h.df[xx,3] <- 0
}
}
return(h.df)
}
n.TotalAll <- n.Blocks*(n.OTarg+n.OLure+n.OFoil+2*(n.FHTarg+n.FHLure)+n.FFoil)
stim.FHS <- as.matrix(read.delim(paste0(stimDir,"FH_single.txt"),header=F))
stim.FHP <- as.matrix(read.delim(paste0(stimDir,"FH_pair.txt"),header=F))
stim.FLS <- as.matrix(read.delim(paste0(stimDir,"FL_single.txt"),header=F))
stim.FLP <- as.matrix(read.delim(paste0(stimDir,"FL_pair.txt"),header=F))
stim.OS <- as.matrix(read.delim(paste0(stimDir,"O_single.txt"),header=F))
stim.OP <- as.matrix(read.delim(paste0(stimDir,"O_pair.txt"),header=F))
h.FHS <- sample(1:dim(stim.FHS)[1],dim(stim.FHS)[1])
h.FLS <- sample(1:dim(stim.FLS)[1],dim(stim.FLS)[1])
h.OS <- sample(1:dim(stim.OS)[1],dim(stim.OS)[1])
h.FHP <- sample(1:dim(stim.FHP)[1],n.Blocks*n.FHLure)
h.FLP <- sample(1:dim(stim.FLP)[1],n.Blocks*n.FLLure)
h.OP <- sample(1:dim(stim.OP)[1],n.Blocks*n.OLure)
v.FHLure <- h.FHP
v.FLLure <- h.FLP
v.OLure <- h.OP
v.FHTarg <- h.FHS[1:(n.Blocks*n.FHTarg)]
v.FLTarg <- h.FLS[1:(n.Blocks*n.FLTarg)]
v.OTarg <- h.OS[1:(n.Blocks*n.OTarg)]
v.FHFoil <- h.FHS[(n.Blocks*n.FHTarg+1):((n.Blocks*n.FHTarg)+(n.Blocks*n.FFoil)/2)]
v.FLFoil <- h.FLS[(n.Blocks*n.FLTarg+1):((n.Blocks*n.FLTarg)+(n.Blocks*n.FFoil)/2)]
v.OFoil <- h.OS[(n.Blocks*n.OTarg+1):((n.Blocks*n.OTarg)+(n.Blocks*n.OFoil))]
tmp.FFoil <- c(stim.FHS[v.FHFoil,1],stim.FLS[v.FLFoil,1])
hold.rand <- sample(1:length(tmp.FFoil),length(tmp.FFoil))
stim.FFoil <- tmp.FFoil[hold.rand]
c.FHT <- c.FLT <- c.OT <- c.FHL <- c.FLL <- c.OL <- c.FF <- c.OF <- 1
cc.FHT <- cc.FLT <- n.FHTarg
cc.FHL <- cc.FLL <- n.FLLure
cc.FF <- n.FFoil
cc.OT <- n.OTarg; cc.OL <- n.OLure; cc.OF <- n.OFoil
hold.na <- rep(NA,2)
j <- 1
hold.FHTarg <- stim.FHS[v.FHTarg[c.FHT:cc.FHT],1]
hold.FLTarg <- stim.FLS[v.FLTarg[c.FLT:cc.FLT],1]
hold.OTarg <- stim.OS[v.OTarg[c.OT:cc.OT],1]
hold.FHLure <- stim.FHP[v.FHLure[c.FHL:cc.FHL],1]
hold.FLLure <- stim.FLP[v.FLLure[c.FLL:cc.FLL],1]
hold.OLure <- stim.OP[v.OLure[c.OL:cc.OL],1]
hold.OFoil <- stim.OS[v.OFoil[c.OF:cc.OF],1]
hold.FFoil <- stim.FFoil[c.FF:cc.FF]
# randomise lists for type (Food,Object)
hold.T <- sample(c(hold.FHTarg,hold.FLTarg,hold.OTarg),n.FHTarg+n.FLTarg+n.OTarg)
hold.L <- sample(c(hold.FHLure,hold.FLLure,hold.OLure),n.FHLure+n.FLLure+n.OLure)
hold.F <- sample(c(hold.FFoil,hold.OFoil),n.FFoil+n.OFoil)
# update counters
c.FHT <- c.FHT+n.FHTarg; c.FLT <- c.FLT+n.FLTarg; c.OT <- c.OT+n.OTarg
c.FHL <- c.FHL+n.FHLure; c.FLL <- c.FLL+n.FLLure; c.OL <- c.OL+n.OLure
c.FF <- c.FF+n.FFoil; c.OF <- c.OF+n.OFoil
cc.FHT <- cc.FHT+n.FHTarg; cc.FLT <- cc.FLT+n.FLTarg; cc.OT <- cc.OT+n.OTarg
cc.FHL <- cc.FHL+n.FHLure; cc.FLL <- cc.FLL+n.FLLure; cc.OL <- cc.OL+n.OLure
cc.FF <- cc.FF+n.FFoil; cc.OF <- cc.OF+n.OFoil
## build each block
# iterate till success
status <- 0; while(status != 1){
# construct stimulus list - this randomization is what makes or breaks the DF construction
hold.input <- Build.Function(hold.T,hold.L,hold.F)
## fill output file
hold.output <- matrix(NA,nrow=(2*(n.Repeat)+n.FFoil+n.OFoil),ncol=6)
hold.rand <- sample(1:dim(hold.output)[1],dim(hold.output)[1])
for(i in 1:dim(hold.input)[1]){
# find first NA, lag, positions 1 & 2
hold.FNA <- as.numeric(min(which(is.na(hold.output[,1]))))
# fill at random
hold.lag <- as.numeric(hold.input[i,3])
hold.pos1 <- as.numeric(hold.rand[i])
hold.pos2 <- hold.lag + hold.pos1
# if lag
if(hold.lag != 0){
# if pos2 is in df
if(hold.pos2 <= as.numeric(dim(hold.output)[1])){
# if pos1 & pos2 are empty
if(is.na(hold.output[hold.pos1,1])==T && is.na(hold.output[hold.pos2,1])==T){
hold.output[hold.pos1,] <- c(hold.input[i,], "No", hold.na)
hold.output[hold.pos2,] <- c(hold.input[i,], "Yes", hold.na)
# find suitable empty rows
}else{
func.out <- SeedNA.Function(hold.lag,hold.output)
if(length(func.out) > 1){
hold.output[as.numeric(func.out[1]),] <- c(hold.input[i,],"No", hold.na)
hold.output[as.numeric(func.out[2]),] <- c(hold.input[i,],"Yes", hold.na)
}
}
# find empty rows in df
}else{
func.out <- SeedNA.Function(hold.lag,hold.output)
if(length(func.out) > 1){
hold.output[as.numeric(func.out[1]),] <- c(hold.input[i,],"No", hold.na)
hold.output[as.numeric(func.out[2]),] <- c(hold.input[i,],"Yes", hold.na)
}
}
# if no lag
}else{
# if pos1 is empty
if(is.na(hold.output[hold.pos1,1])==T){
hold.output[hold.pos1,] <- c(hold.input[i,],"No", hold.na)
}else{
hold.output[hold.FNA,] <- c(hold.input[i,],"No", hold.na)
}
}
}
## Exit while-loop if DF is constructed successfully
n.na<-0; for(i in 1:dim(hold.output)[1]){
if(is.na(hold.output[i,4])==T){
n.na <- n.na+1
}
}
if(n.na == 0 ){
status <- 1
}
}
# switch a-b for repeat,
for(i in 1:dim(hold.output)[1]){
if(grepl("Yes",hold.output[i,4])==T && grepl("Lure",hold.output[i,2])==T){
hold.output[i,1] <- gsub("a.jpg","b.jpg",hold.output[i,1])
}
}
# StimValue column
# (TH = 61, TL = 62, TO = 63, LH = 71, LL = 72, OL = 73, FH = 91, FL = 92, FO = 93)
for(i in 1:dim(hold.output)[1]){
if(grepl("Targ",hold.output[i,2])==T && grepl("F_H_",hold.output[i,1])==T){
hold.output[i,5] <- 61
}else if(grepl("Targ",hold.output[i,2])==T && grepl("F_L_",hold.output[i,1])==T){
hold.output[i,5] <- 62
}else if(grepl("Targ",hold.output[i,2])==T && grepl("O_",hold.output[i,1])==T){
hold.output[i,5] <- 63
}else if(grepl("Lure",hold.output[i,2])==T && grepl("F_H_",hold.output[i,1])==T){
hold.output[i,5] <- 71
}else if(grepl("Lure",hold.output[i,2])==T && grepl("F_L_",hold.output[i,1])==T){
hold.output[i,5] <- 72
}else if(grepl("Lure",hold.output[i,2])==T && grepl("O_",hold.output[i,1])==T){
hold.output[i,5] <- 73
}else if(grepl("Foil",hold.output[i,2])==T && grepl("F_H_",hold.output[i,1])==T){
hold.output[i,5] <- 91
}else if(grepl("Foil",hold.output[i,2])==T && grepl("F_L_",hold.output[i,1])==T){
hold.output[i,5] <- 92
}else if(grepl("Foil",hold.output[i,2])==T && grepl("O_",hold.output[i,1])==T){
hold.output[i,5] <- 93
}
}
# write correct response column (1=Old, 2=Sim, 3=New)
for(i in 1:dim(hold.output)[1]){
if(hold.output[i,4]=="Yes"){
if(hold.output[i,5]==61 || hold.output[i,5]==62 || hold.output[i,5]==63){
hold.output[i,6] <- 1
}else if(hold.output[i,5]==71 || hold.output[i,5]==72 || hold.output[i,5]==73){
hold.output[i,6] <- 2
}
}else{
hold.output[i,6] <- 3
}
}
# write out
trialNum <- 1:(2*(n.Repeat)+n.FFoil+n.OFoil)
hold.output <- cbind(trialNum,hold.output)
hold.reorganize <- matrix(NA,nrow=dim(hold.output)[1],ncol=dim(hold.output)[2])
hold.reorganize[,1] <- hold.output[,1]
hold.reorganize[,2:4] <- hold.output[,3:5]
hold.reorganize[,5] <- hold.output[,2]
hold.reorganize[,6:7] <- hold.output[,6:7]
hold.reorganize <- cbind(hold.reorganize,hold.reorganize[,7])
View(hold.reorganize)
fileName <- paste0(subj,"_B",j,"_stimuli.xlsx")
colnames(hold.reorganize) <- c("Trial","StimType","Lag","Repeat","StimFile","StimValue","CorResp","CellNumber")
View(hold.reorganize)
